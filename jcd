#! /usr/bin/env python
# -*- coding: UTF-8 -*- vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

# The MIT License (MIT)
#
# Copyright (c) 2015 Nicolas Pillot
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the 'Software'),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import sys
import os.path
import argparse

class JcdException(Exception):
	def __init__(self,*args,**kwargs):
		Exception.__init__(self,*args,**kwargs)

class Initialize:
	def __init__(self, data_path, args):
		self._data_path = data_path
		self._args = args

	def _create_folder(self):
		pass

	def _create_log_db(self):
		pass

	def _create_data_db(self):
		pass

	def run(self):
		print self._args
		print self._data_path
		self._create_folder()
		self._create_log_db()
		self._create_data_db()

# main app
class App:
	Path = os.path.expanduser("~/.jcd")

	def __init__(self, data_path):
		# store data path
		self._data_path = data_path
		# main parser
		top = argparse.ArgumentParser(
			description = 'Fetch and store JCDecaux API results',
		)
		subs = top.add_subparsers()

		# initialize command
		init = subs.add_parser(
			'initialize',
			help = 'create application files',
			description = 'Initialize application'
		)
		init.add_argument(
			'--force',
			action = 'store_true',
			help = 'overwrite existing files'
		)
		init.set_defaults(func=self.initialize)
		# parse arguments
		self._args = top.parse_args()
		self._action = self._args.func
		# cleanup namespace
		del self._args.func

	def initialize(self):
		init = Initialize(self._data_path, self._args)
		init.run()

	def run(self):
		try:
			self._action()
		except JcdException as e:
			print e

# main
if __name__ == '__main__':
	app = App(os.path.expanduser("~/.jcd"))
	app.run()
